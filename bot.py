import feedparser
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from datetime import datetime, timedelta

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "7414890925:AAFxyXC2gGMMxu5Z3KVw5BVvYJ75Db2m85c"
CHANNEL_ID = "-1002447063110"
CHANNEL_NAME = "CryptoShuk"
CHANNEL_LINK = "https://t.me/CryptoShuk"


# RSS-–∫–∞–Ω–∞–ª CryptoPanic (–≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏)
RSS_URL = "https://cryptopanic.com/news/rss/"

# Telegram Bot
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
sent_news = set()

def parse_time(time_text):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –æ–±—ä–µ–∫—Ç datetime.
    –ù–∞–ø—Ä–∏–º–µ—Ä: "1 —á–∞—Å –Ω–∞–∑–∞–¥", "42 –º–∏–Ω. –Ω–∞–∑–∞–¥", "17 —Ñ–µ–≤ 2024".
    """
    now = datetime.utcnow()

    if "minute" in time_text:
        minutes = int(time_text.split()[0])
        return now - timedelta(minutes=minutes)
    elif "hour" in time_text:
        hours = int(time_text.split()[0])
        return now - timedelta(hours=hours)
    else:
        return now  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å —Å–≤–µ–∂–µ–π

async def fetch_cryptopanic_news():
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ CryptoPanic RSS """
    feed = feedparser.parse(RSS_URL)
    new_articles = []

    for entry in feed.entries[:10]:  # –ë–µ—Ä–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        title = entry.title
        summary = entry.summary if "summary" in entry else ""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
        news_time = parse_time(entry.published) if "published" in entry else datetime.utcnow()
        time_diff = datetime.utcnow() - news_time

        if time_diff > timedelta(hours=2):  # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            logging.info(f"‚è≥ –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å (—Å—Ç–∞—Ä–∞—è, {time_diff}): {title}")
            continue  

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if title in sent_news:
            logging.info(f"üîÑ –ù–æ–≤–æ—Å—Ç—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {title}")
            continue  

        sent_news.add(title)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"üì∞ *{title}*\nüìñ {summary}\n\n" \
               f"____________\n[{CHANNEL_NAME}]({CHANNEL_LINK})"

        new_articles.append(text)

    return new_articles

async def send_news():
    """ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram """
    news_list = await fetch_cryptopanic_news()

    if not news_list:
        logging.info("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")
    else:
        for news in news_list:
            try:
                await bot.send_message(chat_id=CHANNEL_ID, text=news, parse_mode=ParseMode.MARKDOWN)
                await asyncio.sleep(3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {news.split('*')[1]}")  # –õ–æ–≥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def main():
    """ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ """
    while True:
        await send_news()
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏!")
    asyncio.run(main())
