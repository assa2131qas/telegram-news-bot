import requests
import asyncio
import logging
import feedparser
from deep_translator import GoogleTranslator
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from datetime import datetime, timedelta

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "7414890925:AAFxyXC2gGMMxu5Z3KVw5BVvYJ75Db2m85c"
CHANNEL_ID = "-1002447063110"
CHANNEL_NAME = "CryptoShuk"
CHANNEL_LINK = "https://t.me/CryptoShuk"

CRYPTO_NEWS_RSS = "https://cryptopanic.com/news/rss/"  # RSS-–∫–∞–Ω–∞–ª CryptoPanic
bot = Bot(token=TOKEN)
dp = Dispatcher()

sent_news = set()  # –•—Ä–∞–Ω–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π

# === –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–í–û–î–ê ===
def translate_text(text):
    try:
        return GoogleTranslator(source="auto", target="iw").translate(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª

# === –ü–ê–†–°–ò–ù–ì –ù–û–í–û–°–¢–ï–ô –° –ü–†–û–í–ï–†–ö–û–ô –í–†–ï–ú–ï–ù–ò ===
def get_crypto_news():
    try:
        feed = feedparser.parse(CRYPTO_NEWS_RSS)
        news_list = []

        for entry in feed.entries[:5]:  # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            title = entry.title
            summary = entry.summary
            link = entry.link
            published_time = entry.published_parsed

            news_time = datetime(*published_time[:6])  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–æ–≤–æ—Å—Ç–∏
            time_diff = datetime.utcnow() - news_time

            if time_diff > timedelta(hours=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤
                logging.info(f"‚è≥ –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –Ω–æ–≤–æ—Å—Ç—å ({time_diff}): {title}")
                continue

            translated_title = translate_text(title)
            translated_summary = translate_text(summary)

            news_list.append({
                "title": translated_title,
                "summary": translated_summary,
                "link": link,
                "time": news_time
            })

        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(news_list)} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π.")
        return news_list

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return []

# === –û–¢–ü–†–ê–í–ö–ê –ù–û–í–û–°–¢–ï–ô –í TELEGRAM ===
async def send_crypto_news():
    news = get_crypto_news()
    
    if not news:
        logging.info("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")
        return

    for article in news:
        news_id = article["title"]
        if news_id in sent_news:
            logging.info(f"üîÑ –ù–æ–≤–æ—Å—Ç—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {news_id}")
            continue  

        sent_news.add(news_id)

        text = f"üì∞ *{article['title']}*\nüìä {article['summary']}\n\n" \
               f"[–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({article['link']})\n\n" \
               f"____________\n[{CHANNEL_NAME}]({CHANNEL_LINK})"

        try:
            await bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode=ParseMode.MARKDOWN)
            logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {article['title']}")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ Telegram: {e}")

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
async def main():
    while True:
        await send_crypto_news()
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    asyncio.run(main())
