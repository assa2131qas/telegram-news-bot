import requests
import asyncio
import logging
from bs4 import BeautifulSoup
from deep_translator import GoogleTranslator
from aiogram import Bot, Dispatcher
from datetime import datetime, timedelta

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "7414890925:AAFxyXC2gGMMxu5Z3KVw5BVvYJ75Db2m85c"
CHANNEL_ID = "-1002447063110"
CHANNEL_NAME = "CryptoShuk"
CHANNEL_LINK = "https://t.me/CryptoShuk"

CRYPTO_NEWS_URL = "https://ru.investing.com/news/cryptocurrency-news"
HEADERS = {"User-Agent": "Mozilla/5.0"}

bot = Bot(token=TOKEN)
dp = Dispatcher()
sent_news = set()  # –•—Ä–∞–Ω–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π

# === –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–í–û–î–ê ===
def translate_text(text):
    try:
        return GoogleTranslator(source="auto", target="iw").translate(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª

# === –ü–ê–†–°–ò–ù–ì –ù–û–í–û–°–¢–ï–ô –° –ü–†–û–í–ï–†–ö–û–ô –í–†–ï–ú–ï–ù–ò ===
def get_crypto_news():
    try:
        response = requests.get(CRYPTO_NEWS_URL, headers=HEADERS)
        soup = BeautifulSoup(response.text, "html.parser")

        news_list = []
        articles = soup.find_all("article", class_="js-article-item")[:5]

        for article in articles:
            try:
                title_tag = article.find("a", class_="title")
                summary_tag = article.find("p", class_="text")
                time_tag = article.find("span", class_="date")  # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                img_tag = article.find("img")

                if title_tag and summary_tag and time_tag:
                    title = title_tag.get_text(strip=True)
                    summary = summary_tag.get_text(strip=True)
                    time_text = time_tag.get_text(strip=True)
                    link = "https://ru.investing.com" + title_tag["href"]
                    img_url = img_tag["data-src"] if img_tag and "data-src" in img_tag.attrs else None

                    # === –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ ===
                    news_time = parse_time(time_text)
                    time_diff = datetime.utcnow() - news_time
                    
                    if time_diff > timedelta(hours=2):  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤
                        logging.info(f"‚è≥ –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å (—Å—Ç–∞—Ä–∞—è, {time_diff}): {title}")
                        continue  

                    translated_title = translate_text(title)
                    translated_summary = translate_text(summary)

                    news_list.append({
                        "title": translated_title,
                        "summary": translated_summary,
                        "img": img_url,
                        "link": link,
                        "time": news_time
                    })

            except AttributeError as e:
                logging.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
                continue  

        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(news_list)} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π.")
        return news_list

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return []

# === –ü–ê–†–°–ò–ù–ì –í–†–ï–ú–ï–ù–ò –ü–£–ë–õ–ò–ö–ê–¶–ò–ò ===
def parse_time(time_text):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –æ–±—ä–µ–∫—Ç datetime.
    –ù–∞–ø—Ä–∏–º–µ—Ä: "1 —á–∞—Å –Ω–∞–∑–∞–¥", "42 –º–∏–Ω. –Ω–∞–∑–∞–¥", "17 —Ñ–µ–≤ 2024".
    """
    now = datetime.utcnow()

    if "–º–∏–Ω" in time_text:
        minutes = int(time_text.split()[0])
        return now - timedelta(minutes=minutes)
    elif "—á–∞—Å" in time_text:
        hours = int(time_text.split()[0])
        return now - timedelta(hours=hours)
    else:
        return now  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å —Å–≤–µ–∂–µ–π

# === –û–¢–ü–†–ê–í–ö–ê –ù–û–í–û–°–¢–ï–ô –í TELEGRAM ===
async def send_crypto_news():
    news = get_crypto_news()
    
    if not news:
        logging.info("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")
        return

    for article in news:
        news_id = article["title"]
        if news_id in sent_news:
            logging.info(f"üîÑ –ù–æ–≤–æ—Å—Ç—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {news_id}")
            continue  

        sent_news.add(news_id)

        text = f"üì∞ *{article['title']}*\nüìä {article['summary']}\n\n" \
               f"[–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({article['link']})\n\n" \
               f"____________\n[{CHANNEL_NAME}]({CHANNEL_LINK})"

        try:
            if article["img"]:
                await bot.send_photo(chat_id=CHANNEL_ID, photo=article["img"], caption=text, parse_mode="Markdown")
            else:
                await bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode="Markdown")

            logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {article['title']}")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ –≤ Telegram: {e}")

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
async def main():
    while True:
        await send_crypto_news()
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    asyncio.run(main())
